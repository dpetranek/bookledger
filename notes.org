* action
** DONE books table schema
** DONE reviews table schema
** TODO implement insert-book
(session/get :userid) isn't actually returning the userid, I don't
believe. I've updated the auth workflow to load the whole user record into the
session as a map. Maybe that's the issue, that it's a map inside the map.
** TODO implement insert-review
** TODO display books left join reviews 
* implementation details
** db
*** cheese
Each user will have their own book table and book-meta table. Actually, I could
have the book table be global table, and try to match. That could save
space. But that might be premature. 

I'll go with one table per user, not a shared one. That will avoid privacy
issues and simplify the design. I can revisit that later.

I'll also remove email from the user table for now. I don't want to store emails
unless I have a verification set up, and I don't want to do that right off the
bat, though eventually I will have to handle it.

---
It's turning out to be difficult to add unique ids to the table. I think it's
just a syntax mixup, but I'm getting tired and it's not making sense. Do I need
userids? Is it just a convenience? If the usernames are going to be unique
anyways, what's the point?

(defn create-users-table []
  (sql/with-connection db
    (sql/create-table
     :users
     [:userid :serial "PRIMARY KEY"]
     [:username "varchar(50)"]
     [:pass "varchar(100)"])))

this funtion produces a valid psql command, but it returns an error. For now,
I'll just go with username and pass. We'll circle back later. That sucks though!
I'll have to restructure anything that references the user database. I'll take
another stab at making it work.

--- 

I ended up updating the database driver from 2.3 to 3.6. I had to read the new
api, but I found what works. It also didn't help that the db spec was
incorrectly defined. 

---

Inserting into two tables requires returning the bookid from the books table so
we can include it on the insert into the reviews table. Ideally, this is what I
want:

INSERT INTO books (userid, title) VALUES (<vals>) RETURNING bookid;

However, I can't do that with java.jdbc. At least, I've not been able to figure
it out. I'll ask in IRC, but I'm not confident I'll get a useful response. The
runner up solutions use curval() and lastval(), but I haven't been able to get
those to work. What I have gotten to work is this:

(sql/query db-spec ["SELECT max(bookid) FROM books"])

That will have to do for now. Reference:
http://stackoverflow.com/questions/2944297/postgresql-function-for-last-inserted-id
*** setup
with psql
sudo su postgres
# CREATE ROLE bookledger WITH LOGIN PASSWORD 'admin';
# CREATE DATABASE bookledger OWNER bookledger;

psql bookledger
\dt
\q
*** schema
- user table: the user table will just be usernames and password hashes
  userid [int][pk]
  username [text]
  pass hash [text]
- book table: unique information about a single book; belongs to a user
  book id [int][pk]
  user id [int]
  title [text]
  author [text]
  permission [binary]
  tags [vector]
  series [text]
  seriesnum [int]
- review table: unique information about a single reading; belongs to a user
  and a book 
  review id [int][pk]
  user id [int]
  book id [int]
  date modified [date]
  rating [int]
  comment [text]
*** queries
- homepage
  SELECT * FROM books LEFT JOIN reviews ON books.bookid = reviews.bookid WHERE
  books.userid = :userid ORDER BY reviews.dateRead
** stats
- how many books did I read in <time period>?
- what genre do I read the most?
- what author do like the best?
- what books do I keep coming back to?
- what author have I read the most?
- who has recommended books to me?
- who's recommendations did I enjoy the most?
- what books have I loaned out? To whom?
- when do I read the most?
- how have my views on this book? How has that changed over time?
- what do I think of this author? How has that changed over time?
** user privacy
to start, no users will be able to see anything belonging to another user. I
would like to add granular privacy controls, though. Mark these books as
public, mark these reviews as public, mark these fields as public. Also offer
some sensible defaults - all private. 

- policy
  I don't want your information - it's yours. 
** introduction
Bookledger - track your reading.

Hello! I like to read books. I keep track of books I've read and I'd like to
learn about my reading patterns. I get recommendations from friends, but
sometimes I forget. So I built bookledger, a place to track the books you've
read and the books you want read, and an easy way to learn some nifty things
about your reading patterns. 
** functionality
- Auth
  - registration
  - login
  - logout
- Add
  - add book record
  - bulk upload
    - should mirror the export
    - each row is like a left join of books and reviews
- Filter + Sort
  - by a reasonable number of fields
- Search
  - incremental search with suggestions
  - advanced search - specify search logic
- Explore
  - Use links on records to browse to other similar records, wiki style
- Settings
  - granular privacy
    - what fields are visible to those you share with - circles
    - who you share with
  - password reset
  - export
  - account deletion
- Library management
  - track books loaned to friends
  - track books received from friends
** greenfield
- book discussion pages
- self-hosting
** layout

